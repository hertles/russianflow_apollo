# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

type Point {
  id: ID!
  name: String
  desc: String
  category: Category
  croppedImage: ImageFieldOutput
  image: ImageFieldOutput
  network: String
  route: Route
  x: Float
  y: Float
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input PointWhereUniqueInput {
  id: ID
}

input PointWhereInput {
  AND: [PointWhereInput!]
  OR: [PointWhereInput!]
  NOT: [PointWhereInput!]
  id: IDFilter
  name: StringFilter
  desc: StringFilter
  category: CategoryWhereInput
  network: StringFilter
  route: RouteWhereInput
  x: FloatFilter
  y: FloatFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatFilter
}

input PointOrderByInput {
  id: OrderDirection
  name: OrderDirection
  desc: OrderDirection
  network: OrderDirection
  x: OrderDirection
  y: OrderDirection
}

input PointUpdateInput {
  name: String
  desc: String
  category: CategoryRelateToOneForUpdateInput
  croppedImage: ImageFieldInput
  image: ImageFieldInput
  network: String
  route: RouteRelateToOneForUpdateInput
  x: Float
  y: Float
}

input CategoryRelateToOneForUpdateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
  disconnect: Boolean
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input RouteRelateToOneForUpdateInput {
  create: RouteCreateInput
  connect: RouteWhereUniqueInput
  disconnect: Boolean
}

input PointUpdateArgs {
  where: PointWhereUniqueInput!
  data: PointUpdateInput!
}

input PointCreateInput {
  name: String
  desc: String
  category: CategoryRelateToOneForCreateInput
  croppedImage: ImageFieldInput
  image: ImageFieldInput
  network: String
  route: RouteRelateToOneForCreateInput
  x: Float
  y: Float
}

input CategoryRelateToOneForCreateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
}

input RouteRelateToOneForCreateInput {
  create: RouteCreateInput
  connect: RouteWhereUniqueInput
}

type Path {
  id: ID!
  route: Route
  distance: Float
  desc: String
  nodes(where: NodeWhereInput! = {}, orderBy: [NodeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: NodeWhereUniqueInput): [Node!]
  nodesCount(where: NodeWhereInput! = {}): Int
}

input PathWhereUniqueInput {
  id: ID
}

input PathWhereInput {
  AND: [PathWhereInput!]
  OR: [PathWhereInput!]
  NOT: [PathWhereInput!]
  id: IDFilter
  route: RouteWhereInput
  distance: FloatNullableFilter
  desc: StringFilter
  nodes: NodeManyRelationFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input NodeManyRelationFilter {
  every: NodeWhereInput
  some: NodeWhereInput
  none: NodeWhereInput
}

input PathOrderByInput {
  id: OrderDirection
  distance: OrderDirection
  desc: OrderDirection
}

input PathUpdateInput {
  route: RouteRelateToOneForUpdateInput
  distance: Float
  desc: String
  nodes: NodeRelateToManyForUpdateInput
}

input NodeRelateToManyForUpdateInput {
  disconnect: [NodeWhereUniqueInput!]
  set: [NodeWhereUniqueInput!]
  create: [NodeCreateInput!]
  connect: [NodeWhereUniqueInput!]
}

input PathUpdateArgs {
  where: PathWhereUniqueInput!
  data: PathUpdateInput!
}

input PathCreateInput {
  route: RouteRelateToOneForCreateInput
  distance: Float
  desc: String
  nodes: NodeRelateToManyForCreateInput
}

input NodeRelateToManyForCreateInput {
  create: [NodeCreateInput!]
  connect: [NodeWhereUniqueInput!]
}

type Node {
  id: ID!
  path: Path
  index: Int
  x: Float
  y: Float
}

input NodeWhereUniqueInput {
  id: ID
}

input NodeWhereInput {
  AND: [NodeWhereInput!]
  OR: [NodeWhereInput!]
  NOT: [NodeWhereInput!]
  id: IDFilter
  path: PathWhereInput
  index: IntNullableFilter
  x: FloatNullableFilter
  y: FloatNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input NodeOrderByInput {
  id: OrderDirection
  index: OrderDirection
  x: OrderDirection
  y: OrderDirection
}

input NodeUpdateInput {
  path: PathRelateToOneForUpdateInput
  index: Int
  x: Float
  y: Float
}

input PathRelateToOneForUpdateInput {
  create: PathCreateInput
  connect: PathWhereUniqueInput
  disconnect: Boolean
}

input NodeUpdateArgs {
  where: NodeWhereUniqueInput!
  data: NodeUpdateInput!
}

input NodeCreateInput {
  path: PathRelateToOneForCreateInput
  index: Int
  x: Float
  y: Float
}

input PathRelateToOneForCreateInput {
  create: PathCreateInput
  connect: PathWhereUniqueInput
}

type Category {
  id: ID!
  name: String
  points(where: PointWhereInput! = {}, orderBy: [PointOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PointWhereUniqueInput): [Point!]
  pointsCount(where: PointWhereInput! = {}): Int
  image: ImageFieldOutput
  activeImage: ImageFieldOutput
}

input CategoryWhereUniqueInput {
  id: ID
  name: String
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  points: PointManyRelationFilter
}

input PointManyRelationFilter {
  every: PointWhereInput
  some: PointWhereInput
  none: PointWhereInput
}

input CategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input CategoryUpdateInput {
  name: String
  points: PointRelateToManyForUpdateInput
  image: ImageFieldInput
  activeImage: ImageFieldInput
}

input PointRelateToManyForUpdateInput {
  disconnect: [PointWhereUniqueInput!]
  set: [PointWhereUniqueInput!]
  create: [PointCreateInput!]
  connect: [PointWhereUniqueInput!]
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  name: String
  points: PointRelateToManyForCreateInput
  image: ImageFieldInput
  activeImage: ImageFieldInput
}

input PointRelateToManyForCreateInput {
  create: [PointCreateInput!]
  connect: [PointWhereUniqueInput!]
}

type Route {
  id: ID!
  name: String
  desc: String
  rating: Float
  x: Float
  y: Float
  points(where: PointWhereInput! = {}, orderBy: [PointOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PointWhereUniqueInput): [Point!]
  pointsCount(where: PointWhereInput! = {}): Int
  paths(where: PathWhereInput! = {}, orderBy: [PathOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PathWhereUniqueInput): [Path!]
  pathsCount(where: PathWhereInput! = {}): Int
  image: ImageFieldOutput
}

input RouteWhereUniqueInput {
  id: ID
}

input RouteWhereInput {
  AND: [RouteWhereInput!]
  OR: [RouteWhereInput!]
  NOT: [RouteWhereInput!]
  id: IDFilter
  name: StringFilter
  desc: StringFilter
  rating: FloatNullableFilter
  x: FloatFilter
  y: FloatFilter
  points: PointManyRelationFilter
  paths: PathManyRelationFilter
}

input PathManyRelationFilter {
  every: PathWhereInput
  some: PathWhereInput
  none: PathWhereInput
}

input RouteOrderByInput {
  id: OrderDirection
  name: OrderDirection
  desc: OrderDirection
  rating: OrderDirection
  x: OrderDirection
  y: OrderDirection
}

input RouteUpdateInput {
  name: String
  desc: String
  rating: Float
  x: Float
  y: Float
  points: PointRelateToManyForUpdateInput
  paths: PathRelateToManyForUpdateInput
  image: ImageFieldInput
}

input PathRelateToManyForUpdateInput {
  disconnect: [PathWhereUniqueInput!]
  set: [PathWhereUniqueInput!]
  create: [PathCreateInput!]
  connect: [PathWhereUniqueInput!]
}

input RouteUpdateArgs {
  where: RouteWhereUniqueInput!
  data: RouteUpdateInput!
}

input RouteCreateInput {
  name: String
  desc: String
  rating: Float
  x: Float
  y: Float
  points: PointRelateToManyForCreateInput
  paths: PathRelateToManyForCreateInput
  image: ImageFieldInput
}

input PathRelateToManyForCreateInput {
  create: [PathCreateInput!]
  connect: [PathWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPoint(data: PointCreateInput!): Point
  createPoints(data: [PointCreateInput!]!): [Point]
  updatePoint(where: PointWhereUniqueInput!, data: PointUpdateInput!): Point
  updatePoints(data: [PointUpdateArgs!]!): [Point]
  deletePoint(where: PointWhereUniqueInput!): Point
  deletePoints(where: [PointWhereUniqueInput!]!): [Point]
  createPath(data: PathCreateInput!): Path
  createPaths(data: [PathCreateInput!]!): [Path]
  updatePath(where: PathWhereUniqueInput!, data: PathUpdateInput!): Path
  updatePaths(data: [PathUpdateArgs!]!): [Path]
  deletePath(where: PathWhereUniqueInput!): Path
  deletePaths(where: [PathWhereUniqueInput!]!): [Path]
  createNode(data: NodeCreateInput!): Node
  createNodes(data: [NodeCreateInput!]!): [Node]
  updateNode(where: NodeWhereUniqueInput!, data: NodeUpdateInput!): Node
  updateNodes(data: [NodeUpdateArgs!]!): [Node]
  deleteNode(where: NodeWhereUniqueInput!): Node
  deleteNodes(where: [NodeWhereUniqueInput!]!): [Node]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(where: CategoryWhereUniqueInput!, data: CategoryUpdateInput!): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createRoute(data: RouteCreateInput!): Route
  createRoutes(data: [RouteCreateInput!]!): [Route]
  updateRoute(where: RouteWhereUniqueInput!, data: RouteUpdateInput!): Route
  updateRoutes(data: [RouteUpdateArgs!]!): [Route]
  deleteRoute(where: RouteWhereUniqueInput!): Route
  deleteRoutes(where: [RouteWhereUniqueInput!]!): [Route]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  points(where: PointWhereInput! = {}, orderBy: [PointOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PointWhereUniqueInput): [Point!]
  point(where: PointWhereUniqueInput!): Point
  pointsCount(where: PointWhereInput! = {}): Int
  paths(where: PathWhereInput! = {}, orderBy: [PathOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PathWhereUniqueInput): [Path!]
  path(where: PathWhereUniqueInput!): Path
  pathsCount(where: PathWhereInput! = {}): Int
  nodes(where: NodeWhereInput! = {}, orderBy: [NodeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: NodeWhereUniqueInput): [Node!]
  node(where: NodeWhereUniqueInput!): Node
  nodesCount(where: NodeWhereInput! = {}): Int
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  category(where: CategoryWhereUniqueInput!): Category
  categoriesCount(where: CategoryWhereInput! = {}): Int
  routes(where: RouteWhereInput! = {}, orderBy: [RouteOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RouteWhereUniqueInput): [Route!]
  route(where: RouteWhereUniqueInput!): Route
  routesCount(where: RouteWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
